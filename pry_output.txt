pry(main)> require './lib/turn'
require './lib/board'
require './lib/ship'

board1 = Board.new
board2 = Board.new

p1s1 = Ship.new('Cruiser', 3)
p1s2 = Ship.new('Submarine', 2)
p2s1 = Ship.new('Cruiser', 3)
p2s2 = Ship.new('Submarine', 2)

board1.place(p1s1, %w[A1 A2 A3])
board1.place(p1s2, %w[B1 B2])
board2.place(p2s1, %w[C1 C2 C3])
[1] pry(main)> require './lib/turn'
require './lib/board'
require './lib/ship'
board1 = Board.neward1, board2)
board2 = Board.new
p1s1 = Ship.new('Cruiser', 3)
p1s2 = Ship.new('Submarine', 2)
p2s1 = Ship.new('Cruiser', 3)
p2s2 = Ship.new('Submarine', 2)
board1.place(p1s1, %w[A1 A2 A3])
board1.place(p1s2, %w[B1 B2])
board2.place(p2s1, %w[C1 C2 C3])
board2.place(p2s2, %w[D3 D4])
turn = Turn.new(board1, board2)
turn.print_boards
turn.take_turn
Player Board:
 1 2 3 4
A S S S .
B S S . .
C . . . .
D . . . .

Computer Board:
 1 2 3 4
A . . . .
B . . . .
C . . . .
D . . . .


******* turn number: 1 *******

Player Board:
 1 2 3 4
A S S S .
B S S . .
C . . . .
D . . . .

Computer Board:
 1 2 3 4
A . . . .
B . . . .
C . . . .
D . . . .

enter target: C7
invalid target
enter target: C3
User result: C3: hit
Computer result: D1: miss

Player Board:
 1 2 3 4
A S S S .
B S S . .
C . . . .
D M . . .

Computer Board:
 1 2 3 4
A . . . .
B . . . .
C . . H .
D . . . .

=> nil
[2] pry(main)> turn.take_turn

******* turn number: 2 *******

Player Board:
 1 2 3 4
A S S S .
B S S . .
C . . . .
D M . . .

Computer Board:
 1 2 3 4
A . . . .
B . . . .
C . . H .
D . . . .

enter target: C1
User result: C1: hit
Computer result: B3: miss

Player Board:
 1 2 3 4
A S S S .
B S S M .
C . . . .
D M . . .

Computer Board:
 1 2 3 4
A . . . .
B . . . .
C H . H .
D . . . .

=> nil
[3] pry(main)> turn.take_turn

******* turn number: 3 *******

Player Board:
 1 2 3 4
A S S S .
B S S M .
C . . . .
D M . . .

Computer Board:
 1 2 3 4
A . . . .
B . . . .
C H . H .
D . . . .

enter target: CC
invalid target
enter target: C2
User result: C2: sunk Cruiser
Computer result: B1: hit

Player Board:
 1 2 3 4
A S S S .
B H S M .
C . . . .
D M . . .

Computer Board:
 1 2 3 4
A . . . .
B . . . .
C X X X .
D . . . .

=> nil
[4] pry(main)> turn.take_turn

******* turn number: 4 *******

Player Board:
 1 2 3 4
A S S S .
B H S M .
C . . . .
D M . . .

Computer Board:
 1 2 3 4
A . . . .
B . . . .
C X X X .
D . . . .

enter target: C1
you already shot there.
invalid target
enter target: A1
User result: A1: miss
Computer result: C1: miss

Player Board:
 1 2 3 4
A S S S .
B H S M .
C M . . .
D M . . .

Computer Board:
 1 2 3 4
A M . . .
B . . . .
C X X X .
D . . . .

=> nil
[6] pry(main)> turn.take_turn

******* turn number: 5 *******

Player Board:
 1 2 3 4
A S S S .
B H S M .
C M . . .
D M . . .

Computer Board:
 1 2 3 4
A M . . .
B . . . .
C X X X .
D . . . .

enter target: D1
User result: D1: miss
Computer result: D1: miss

Player Board:
 1 2 3 4
A S S S .
B H S M .
C M . . .
D M . . .

Computer Board:
 1 2 3 4
A M . . .
B . . . .
C X X X .
D M . . .

=> nil
[7] pry(main)> turn.take_turn

******* turn number: 6 *******

Player Board:
 1 2 3 4
A S S S .
B H S M .
C M . . .
D M . . .

Computer Board:
 1 2 3 4
A M . . .
B . . . .
C X X X .
D M . . .

enter target: D4
User result: D4: hit
Computer result: B3: miss

Player Board:
 1 2 3 4
A S S S .
B H S M .
C M . . .
D M . . .

Computer Board:
 1 2 3 4
A M . . .
B . . . .
C X X X .
D M . . H

=> nil
[8] pry(main)> turn.take_turn

******* turn number: 7 *******

Player Board:
 1 2 3 4
A S S S .
B H S M .
C M . . .
D M . . .

Computer Board:
 1 2 3 4
A M . . .
B . . . .
C X X X .
D M . . H

enter target: C4
User result: C4: miss
Computer result: D3: miss

Player Board:
 1 2 3 4
A S S S .
B H S M .
C M . . .
D M . M .

Computer Board:
 1 2 3 4
A M . . .
B . . . .
C X X X M
D M . . H

=> nil
[9] pry(main)> turn.take_turn

******* turn number: 8 *******

Player Board:
 1 2 3 4
A S S S .
B H S M .
C M . . .
D M . M .

Computer Board:
 1 2 3 4
A M . . .
B . . . .
C X X X M
D M . . H

enter target: D3
User result: D3: sunk Submarine
Computer result: C2: miss

Player Board:
 1 2 3 4
A S S S .
B H S M .
C M M . .
D M . M .

Computer Board:
 1 2 3 4
A M . . .
B . . . .
C X X X M
D M . X X

=> nil
[10] pry(main)>